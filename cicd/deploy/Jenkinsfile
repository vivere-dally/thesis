properties([
    parameters([
        [
            $class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HIDDEN_HTML',
            name: 'BranchName',
            omitValueField: true,
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        return """
                            <label for='value'>Error: The script failed or it is not allowed by Jenkins. Check Script approval from General Settings. Enter the value manually:</label><br>
                            <input type='text' name='value'>
                        """
                    '''
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        return '<input name="value" value="${env.BRANCH_NAME}" type="text">'
                    """
                ]
            ]
        ],
        [
            $class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'ResourceGroupName',
            omitValueField: true,
            description: 'Enter the resource group name.',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        return """
                            <label for='value'>Error: The script failed or it is not allowed by Jenkins. Check Script approval from General Settings. Enter the value manually:</label><br>
                            <input type='text' name='value'>
                        """
                    '''
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        List<String> authenticate(Map<String, String> params) {
                            def req = (HttpURLConnection) new URL("${params.loginUrl}${params.tenantId}/oauth2/token").openConnection()
                            req.setRequestProperty('Content-Type', 'application/x-www-form-urlencoded')
                            req.setRequestProperty('Accept', 'application/json; charset=UTF-8')
                            req.with {
                                requestMethod = 'POST'
                                doOutput = true
                                outputStream.withWriter { writer ->
                                    def reqBody = [
                                            'grant_type=client_credentials',
                                            "client_id=${params.clientId}",
                                            "client_secret=${params.clientSecret}",
                                            "resource=${URLEncoder.encode(params.resource, 'UTF-8')}"
                                    ].join('&')
                                    writer << reqBody
                                }
                            }

                            def result = new groovy.json.JsonSlurper().parseText(req.inputStream.text)
                            return [result.token_type, result.access_token]
                        }

                        def params = jenkins.model.Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].credentials.find { it ->
                          it.getId() == 'azure_secrets'
                        }.getSecret().getPlainText().split('&').collectEntries { it ->
                          def kvp = it.split('=')
                          return [kvp[0], kvp[1]]
                        }

                        String tokenType, accessToken
                        (tokenType, accessToken) = authenticate(params)

                        def req = (HttpURLConnection) new URL("${params.resource}subscriptions/${params.subscriptionId}/resourcegroups?api-version=2020-06-01").openConnection()
                        req.setRequestProperty('Authorization', "${tokenType} ${accessToken}")
                        def result = new groovy.json.JsonSlurper().parseText(req.inputStream.text)

                        def resourceGroupNames = result.value.collect { it.name }
                        def html = "<input list='resource-group-names' name='value' />"
                        html += "<datalist id='resource-group-names'>"
                        resourceGroupNames.forEach { name ->
                            html += "<option value='${name}'>"
                        }

                        html += "</datalist>"

                        return html
                    '''
                ]
            ]
        ],
        [
            $class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'Tag',
            omitValueField: true,
            description: 'Select the tag to be deployed.',
            referencedParameters: 'BranchName',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        return """
                            <label for='value'>Error: The script failed or it is not allowed by Jenkins. Check Script approval from General Settings. Enter the value manually:</label><br>
                            <input type='text' name='value'>
                        """
                    '''
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script: '''
                        def jsonSlurper = new groovy.json.JsonSlurper()
                        def acrCred = jenkins.model.Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].credentials.find { it ->
                          it.getId() == 'azure_container_registry'
                        }

                        def acrUsername = acrCred.getUsername()
                        def acrPassword = acrCred.getPassword().getPlainText()

                        def auth = "${acrUsername}:${acrPassword}".bytes.encodeBase64().toString()
                        def tags = ['backend', 'frontend'].collect { name ->
                            def req = (HttpURLConnection) new URL("https://${acrUsername}.azurecr.io/acr/v1/${BranchName}/${name}/_tags").openConnection()
                            req.setRequestProperty('Authorization', "Basic ${auth}")
                            def result = jsonSlurper.parseText(req.inputStream.text)
                            result.tags.sort { a, b -> b.createdTime <=> a.createdTime }.collect { it.name }
                        }

                        tags = tags[0].intersect(tags[1])
                        def html = "<select name='value'>"
                        tags.forEach { tagName ->
                            html += "<option value='${tagName}'>${tagName}</option>"
                        }

                        html += "</select>"

                        return html
                    '''
                ]
            ]
        ]
    ])
])

pipeline {
    agent any

    options {
        buildDiscarder logRotator(numToKeepStr: '10')
        skipStagesAfterUnstable()
    }

    stages {
        stage('Deploy') {
            when {
                triggeredBy cause: 'UserIdCause'
            }

            steps {
                withCredentials([
                    string(credentialsId: 'azure_secrets', variable: 'azureSecrets'),
                    usernamePassword(credentialsId: 'azure_container_registry', passwordVariable: 'acrPassword', usernameVariable: 'acrUsername'),
                    usernamePassword(credentialsId: 'azure_my_sql_credentials', passwordVariable: 'mySqlPassword', usernameVariable: 'mySqlUsername')
                ]) {
                ansiColor('xterm') {
                    pwsh label: 'Deploy to Azure', script: '''
                        $ErrorActionPreference = 'Stop'
                        Set-Item Env:\\SuppressAzurePowerShellBreakingChangeWarnings 'true'

                        $params = @{}
                        $env:azureSecrets.Split('&') | ForEach-Object { $kvp = $_.Split('='); $params[$kvp[0]] = $kvp[1] }

                        ./cicd/deploy/src/deploy.ps1 `
                            -SubscriptionId $params.subscriptionId `
                            -TenantId $params.tenantId `
                            -ClientId $params.clientId `
                            -ClientSecret $params.clientSecret `
                            -ResourceGroupName $env:ResourceGroupName `
                            -Location 'westeurope' `
                            -ACRUsername $env:acrUsername `
                            -ACRPassword $env:acrPassword `
                            -BranchName $env:BRANCH_NAME `
                            -Tag $env:Tag `
                            -MySqlUsername $env:mySqlUsername `
                            -MySqlPassword $env:mySqlPassword
                    '''
                    }
                }

                archiveArtifacts artifacts: "cicd/deploy/src/*.log", fingerprint: true
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
