pipeline {
    agent {
        label 'master'
    }

    environment {
        BuildMetadata = VersionNumber(versionNumberString: '${BUILD_DATE_FORMATTED, "yyD"}.${BUILDS_ALL_TIME, XXXX}', worstResultForIncrement: 'SUCCESS')
    }

    options {
        copyArtifactPermission('thesis-deploy')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        skipStagesAfterUnstable()
    }

    parameters {
        choice(choices: ['', 'Patch', 'Minor', 'Major'], description: 'Specifies the Release type.', name: 'Release')
        choice(choices: ['', 'alpha', 'beta', 'rc'], description: 'Specifies the Prerelease type.', name: 'Prerelease')
        booleanParam(defaultValue: true, description: 'Use the existing npm_modules.', name: 'UseCommonNpmModules')
        string(defaultValue: 'E:/Dev/npm/node_modules', description: 'Path to the shared npm_modules.', name: 'CommonNpmModulesPath', trim: true)
    }

    stages {
        stage ('Init') {
            steps {
                script {
                    env.ProjectVersion = powershell(returnStdout: true, script: '''
                        $psRelease = if (Test-Path env:Release) { $env:Release } else { '' }
                        $psPrerelease = if (Test-Path env:Prerelease) { $env:Prerelease } else { '' }
                        $psBuildMetadata = if (Test-Path env:BuildMetadata) { $env:BuildMetadata } else { '' }
                        ./CICD/Build/Init.ps1 `
                            -Release $psRelease `
                            -Prerelease $psPrerelease `
                            -BuildMetadata $psBuildMetadata
                    ''').strip()
                    echo "Project Version: ${env.ProjectVersion}"
                }
            }
        }

        stage ('Build') {
            steps {
                powershell '''
                    $psFreshNpmModules = if (Test-Path env:FreshNpmModules) { $env:FreshNpmModules } else { $false }
                    ./CICD/Build/Build.ps1 `
                        -ProjectVersion $env:ProjectVersion `
                        -FreshNpmModules ([boolean] $psFreshNpmModules)
                '''
            }
        }

        stage ('Test') {
            steps {
                powershell '''
                    ./CICD/Build/Test.ps1
                '''
            }

            post {
                always {
                    junit 'Server/thesis/target/surefire-reports/*.xml'
                }
            }
        }

        stage ('Artifacts') {
            steps {
                archiveArtifacts artifacts: 'Server/thesis/target/*.jar', fingerprint: true
                archiveArtifacts artifacts: 'Client/thesis/*.zip', fingerprint: true
            }
        }

        stage ('Tag') {
            when {
                expression {
                    params.Release
                }
            }

            steps {
                sshagent(['github_vivere-dally']) {
                    powershell '''
                        ./CICD/Build/Tag.ps1 -ProjectVersion $env:ProjectVersion
                    '''
                }

                script {
                    // Keep this build forever
                    currentBuild.keepLog = true
                }
            }
        }

        stage ('Deploy') {
            environment {
                ACR_CRED = credentials('azure_container_registry')
            }

            steps {
                powershell '''

                '''
            }
        }
    }
}
