pipeline {
    agent {
        label 'master'
    }

    environment {
        BuildMetadata = VersionNumber(versionNumberString: '${BUILD_DATE_FORMATTED, "yyyy.w.D"}.${BUILDS_ALL_TIME, XXX}', worstResultForIncrement: 'SUCCESS')
    }

    options {
        copyArtifactPermission 'thesis-deploy'
    }

    parameters {
        choice(choices: ['', 'alpha', 'beta', 'rc'], name: 'PreReleaseTag')
        choice(choices: ['', 'Patch', 'Minor', 'Major'], name: 'ReleaseType')
    }

    stages {
        stage ('Init') {
            steps {
                script {
                    def output = powershell(returnStdout: true, script: '''
                        ('./Server/thesis' | Resolve-Path).Path
                        ('./Client/thesis' | Resolve-Path).Path
                    ''').tokenize('\n')

                    env.BackendAbsolutePath = output[0].trim()
                    env.FrontendAbsolutePath = output[1].trim()
                }
            }
        }

        stage ('Build') {
            steps {
                powershell '''
                    ./CICD/Build/Build.ps1 `
                        -BackendAbsolutePath $env:BackendAbsolutePath `
                        -FrontendAbsolutePath $env:FrontendAbsolutePath `
                        -BuildMetadata $env:BuildMetadata `
                        -PreReleaseTag $env:PreReleaseTag `
                        -ReleaseType $env:ReleaseType
                '''
            }
        }

        stage ('Test') {
            steps {
                powershell '''
                    ./CICD/Build/Test.ps1 `
                        -BackendAbsolutePath $env:BackendAbsolutePath `
                        -FrontendAbsolutePath $env:FrontendAbsolutePath
                '''
            }

            post {
                always {
                    junit 'Server/thesis/target/surefire-reports/*.xml'
                }
            }
        }

        stage ('Artifacts') {
            steps {
                archiveArtifacts artifacts: 'Server/thesis/target/*.jar', fingerprint: true
            }
        }

        stage ('Git Push') {
            when {
                expression {
                    params.ReleaseType
                }
            }

            echo "TODO"
        }
    }
}
